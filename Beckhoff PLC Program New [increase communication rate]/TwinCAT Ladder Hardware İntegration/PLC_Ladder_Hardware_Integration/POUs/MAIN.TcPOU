<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{2c735906-2965-459b-8d25-e886979e7cc1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// ntp.beckhoff-cloud.com
	// time.windows.com
	Lidar_zones:  Safety_Zones; 
	encoderPosition AT  %I* : UDINT;
	actualAxisPosition AT  %I* : LREAL;
	actualAxisPositionA AT  %I* : LREAL;
	Left_Encoder : LREAL;
	Right_Encoder : LREAL;
	setPositionA AT  %I* : LREAL ;
	setPositionB AT  %I* : LREAL ;
	AxisB : AXIS_REF;
	AxisA : AXIS_REF;
	timer : TON;
	SetTimeToRtcTime : Nt_SetTimeToRtcTime  ;
	// Motor 1
	McPower : MC_Power;
	McReset : MC_Reset;
	McJogging : MC_Jog;
	McVelocity : MC_MoveVelocity;
	McStop :  MC_Stop;
	McHalt : MC_Halt;
	McSetPositionA: MC_SetPosition;
	McSetPosition: MC_SetPosition;
	McPosition : MC_ReadActualPosition;
	McPositionA : MC_ReadActualPosition;
	

	// Motor 2
	McPowerA : MC_Power;
	McResetA : MC_Reset;
	McJoggingA : MC_Jog;
	McVelocityA : MC_MoveVelocity;
	McStopA :  MC_Stop;
	McHaltA : MC_Halt;
	
	CppVelocityValue : DINT;
	CppVelocityCmd : DINT;
	RightVelocityValue : REAL;
	LeftVelocityValue : REAL;
	RightVelocityCmd : REAL;
	LeftVelocityCmd : REAL;
	RightVelocity_meters : REAL;
	LeftVelocity_meters : REAL;
	acc : REAL:=0;
	dcc : REAL:=0;
	jk	: REAL:=0;
	myvelocity : DINT;
	cppvar AT %I* : BOOL;
	pypositive AT %I* : BOOL;
	pynegative AT %I* : BOOL;
	pyturnright AT %I* : BOOL;
	pyturnleft AT %I* : BOOL;
	state : DINT;
	stop AT %I* : BOOL;
	fright AT %I* : BOOL;
	bright AT %I* : BOOL;
	fleft AT %I* : BOOL;
	bleft AT %I* : BOOL;

	ChargeSignal       AT %Q* : BOOL;
	Lift_UP            AT %Q* : BOOL:= FALSE;
	Lift_DOWN          AT %Q* : BOOL;
	Lift_UP_Signal	   AT %M* : BOOL;
	Lift_DOWN_Signal   AT %M* : BOOL;
	Lift_Stop          AT %M* : BOOL;
	FrontLidarWarning  AT %I* : BOOL;
	BackLidarWarning   AT %I* : BOOL;

	stopvalue : BOOL;
	Acceleration: LREAL;
	Options: INT;
	nVAR: REAL;
	
	//Lidar Zones
	zon_1_set          AT %M* : BOOL; 
	zon_2_set          AT %M* : BOOL; 
	zon_3_set          AT %M* : BOOL; 
	zon_4_set          AT %M* : BOOL; 
	zon_5_set          AT %M* : BOOL; 
	zon_6_set          AT %M* : BOOL;    
	
	PLC_Minutes : INT;
	PLC_Seconds : INT;
	velocity_seconds : INT;
	velocity_minutes : INT;
	time_difference : INT := 0 ;
	abs_time_difference : INT := 0 ;
	velocity_timeout : BOOL := FALSE ;
	
	NETID  : T_AmsNetId := '192.168.0.176.1.1' ;
    SET    : BOOL;
    TMOUT  : TIME := DEFAULT_ADS_TIMEOUT;
	
	first_pc_time_reading: INT;
	second_pc_time_reading: INT;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[SYSTEM();
Meters_Travelled();
Ladder_Logic_Diagram();

SetTimeToRtcTime( NETID := '192.168.0.176.1.1' ,
					SET := TRUE,
					TMOUT:= DEFAULT_ADS_TIMEOUT);


//PLC_Minutes := STRING_TO_INT (GVL.SystemMinutes);
//PLC_Seconds := STRING_TO_INT (GVL.SystemSeconds);
//time_difference := PLC_Seconds  - velocity_seconds  ;
//abs_time_difference := ABS(time_difference);
IF GVLLD.first_time_read THEN
first_pc_time_reading := STRING_TO_INT (GVL.SystemSeconds);	
END_IF
IF GVLLD.second_time_read THEN
second_pc_time_reading := STRING_TO_INT (GVL.SystemSeconds);
END_IF
// Axis B Left Motor
AxisB.ReadStatus();
McPower(Axis:=AxisB,Enable := TRUE,Enable_Positive := TRUE, Enable_Negative := TRUE);
McSetPosition(Axis:= AxisB,Execute:= TRUE, Position := setPositionA);
McPosition(Axis := AxisB,Enable := TRUE );
actualAxisPosition := McPosition.Position;
Left_Encoder := actualAxisPosition ;

// Axis A Right Motor
AxisA.ReadStatus();
McPowerA(Axis:=AxisA,Enable := TRUE,Enable_Positive := TRUE, Enable_Negative := TRUE);
McSetPositionA(Axis:= AxisA,Execute:= TRUE, Position := setPositionB);
McPositionA(Axis := AxisA,Enable := TRUE );
actualAxisPositionA := McPositionA.Position;
Right_Encoder := actualAxisPositionA ;

CppVelocityCmd := CppVelocityValue;
RightVelocity_meters := RightVelocityCmd /1000 ;
LeftVelocity_meters := LeftVelocityCmd / 1000 ;
IF NOT GVLLD.view_safety THEN
	RightVelocityCmd := 0;
	LeftVelocityCmd := 0;
	ELSE IF NOT FrontLidarWarning OR NOT BackLidarWarning THEN
		RightVelocityCmd := RightVelocityValue * 0.9;
		LeftVelocityCmd := LeftVelocityValue * 0.9;
	ELSE IF FrontLidarWarning OR BackLidarWarning THEN
		RightVelocityCmd := RightVelocityValue;
		LeftVelocityCmd := LeftVelocityValue;
		END_IF
	END_IF
END_IF

stopvalue := stop;



CASE state OF 
	0: 	
		state := 10;
	10: 
		McReset(Axis := AxisB,Execute := FALSE);
		McResetA(Axis := AxisA,Execute := FALSE);
		McReset(Axis := AxisB,Execute := TRUE);
		McResetA(Axis := AxisA,Execute := TRUE);
		IF McReset.Done AND McResetA.Done  THEN
			state := 20;
		ELSIF NOT McReset.Done OR NOT McResetA.Done THEN 
			McReset(Axis := AxisB,Execute := FALSE);
			McResetA(Axis := AxisA,Execute := FALSE);
			McReset(Axis := AxisB,Execute := TRUE);
			McResetA(Axis := AxisA,Execute := TRUE);
			state := 20;
		END_IF
		
	20: 
	
		McPowerA(Axis:=AxisA,Enable := TRUE,Enable_Positive := TRUE, Enable_Negative := TRUE);
		McPower(Axis:=AxisB,Enable := TRUE,Enable_Positive := TRUE, Enable_Negative := TRUE);
		IF McPower.Status AND McPowerA.Status THEN
			state :=50;
		END_IF
		
	
	//CPP Function Block
//	40: 
		
//		McVelocityA (Axis:= AxisA,
//					Execute := cppvar,
//					Velocity := CppVelocityCmd,
//						Acceleration := acc,
//						Deceleration := dcc,
//						Jerk := jk,
//					Direction := MC_Direction.MC_Positive_Direction ) ;
//		McVelocity (Axis:= AxisB,
//					Execute := cppvar,
//					Velocity := CppVelocityCmd,
//						Acceleration := acc,
//						Deceleration := dcc,
//						Jerk := jk,
//					Direction := MC_Direction.MC_Positive_Direction ) ;
//		McVelocityA (Axis:= AxisA,
//					Execute := cppvar,
//					Velocity := CppVelocityCmd,
//						Acceleration := acc,
//						Deceleration := dcc,
//						Jerk := jk,
//					Direction := MC_Direction.MC_Negative_Direction ) ;
//		McVelocity (Axis:= AxisB,
//					Execute := cppvar,
//					Velocity := CppVelocityCmd,
//						Acceleration := acc,
//						Deceleration := dcc,
//						Jerk := jk,
//					Direction := MC_Direction.MC_Negative_Direction ) ;
//		IF stopvalue THEN
//			McVelocity(Axis := AxisB, Execute := FALSE); 
//			McVelocityA(Axis := AxisA, Execute := FALSE); 
//			state := 900;
//		END_IF
//		IF fright OR fleft OR bright OR bleft THEN 
//			McVelocity(Axis := AxisB, Execute := FALSE);
//			McVelocityA(Axis := AxisA, Execute := FALSE);
//			state := 50;
//		END_IF
		
		
	//Python Function Block
	50: 
		// POSİTİVE
		IF AxisA.Status.Error OR AxisB.Status.Error THEN 
			McReset(Axis := AxisB,Execute := FALSE);
			McResetA(Axis := AxisA,Execute := FALSE);
			McReset(Axis := AxisB,Execute := TRUE);
			McResetA(Axis := AxisA,Execute := TRUE);
//			state :=0;
		END_IF
		IF stopvalue THEN
			
			McVelocity(Axis := AxisB, Execute := FALSE); 
			McVelocityA(Axis := AxisA, Execute := FALSE);
			state := 900;
		END_IF
		IF GVLLD.auto_charge_signal THEN   
   			McVelocity(Axis := AxisB, Execute := FALSE);    
			McVelocityA(Axis := AxisA, Execute := FALSE);
  			state := 400;  
		END_IF

		
//		IF time_difference >  2 AND abs_time_difference < 57 THEN
		IF first_pc_time_reading = second_pc_time_reading THEN
			velocity_timeout := TRUE;
			LeftVelocityValue := 0 ;
			RightVelocityValue := 0 ;
			RightVelocityCmd := RightVelocityValue;
			LeftVelocityCmd := LeftVelocityValue;
			McVelocityA (Axis:= AxisA,
						Execute := FALSE,
						Velocity := RightVelocityCmd,
						Acceleration := acc,
						Deceleration := dcc,
						Jerk := jk,
						Direction := MC_Direction.MC_Positive_Direction ) ;
			McVelocityA (Axis:= AxisA,
						Execute := TRUE,
						Velocity := RightVelocityCmd,
						Acceleration := acc,
						Deceleration := dcc,
						Jerk := jk,
						Direction := MC_Direction.MC_Negative_Direction ) ;
			McVelocity (Axis:= AxisB,
						Execute := FALSE,
						Velocity := LeftVelocityCmd,
						Acceleration := acc,
						Deceleration := dcc,
						Jerk := jk,
						Direction := MC_Direction.MC_Positive_Direction ) ;
			McVelocity (Axis:= AxisB,
						Execute := TRUE,
						Velocity := LeftVelocityCmd,
						Acceleration := acc,
						Deceleration := dcc,
						Jerk := jk,
						Direction := MC_Direction.MC_Negative_Direction ) ;
		state :=50;
		ELSE
		velocity_timeout := FALSE;

		IF RightVelocityCmd >= 0 THEN
			fright := TRUE;
			bright := FALSE;
		END_IF
		IF RightVelocityCmd < 0 THEN
			fright := FALSE;
			bright := TRUE;
		END_IF
		IF LeftVelocityCmd >= 0 THEN 
			fleft := TRUE;
			bleft := FALSE;
		END_IF
		IF LeftVelocityCmd < 0 THEN
			fleft := FALSE;
			bleft := TRUE;
		END_IF

		McVelocity (Axis:= AxisB,
						Execute := bleft,
						Velocity := ABS(LeftVelocityCmd),
						Acceleration := acc,
						Deceleration := dcc,
						Jerk := jk,
						Direction := MC_Direction.MC_Negative_Direction ) ;
		McVelocity (Axis:= AxisB,
						Execute := fleft,
						Velocity := ABS(LeftVelocityCmd),
						Acceleration := acc,
						Deceleration := dcc,
						Jerk := jk,
						Direction := MC_Direction.MC_Positive_Direction ) ;
		McVelocityA (Axis:= AxisA,
						Execute := bright,
						Velocity := ABS(RightVelocityCmd),
						Acceleration := acc,
						Deceleration := dcc,
						Jerk := jk,
						Direction := MC_Direction.MC_Negative_Direction ) ;
		McVelocityA (Axis:= AxisA,
						Execute := fright, 
						Velocity := ABS(RightVelocityCmd),
						Acceleration := acc,
						Deceleration := dcc,
						Jerk := jk,
						Direction := MC_Direction.MC_Positive_Direction ) ;
	state :=50;
		END_IF
		
			

		
		IF cppvar THEN 
			McVelocity(Axis := AxisB, Execute := FALSE);
			McVelocityA(Axis := AxisA, Execute := FALSE);
			state := 40;
		END_IF
	400:  
		IF AxisA.Status.Error OR AxisB.Status.Error THEN 
		   	McReset(Axis := AxisB,Execute := FALSE);   
			McResetA(Axis := AxisA,Execute := FALSE);
		   	McReset(Axis := AxisB,Execute := TRUE);   
			McResetA(Axis := AxisA,Execute := TRUE);
  		END_IF
    	McStop(Axis := AxisB, Execute := TRUE);
  		McStopA(Axis := AxisA, Execute := TRUE);  
  		IF NOT GVLLD.auto_charge_signal THEN   
			McStop(Axis := AxisB, Execute := FALSE); 
			McVelocity(Axis := AxisB, Execute := FALSE);    
			McStopA(Axis := AxisA, Execute := FALSE); 
			McVelocityA(Axis := AxisA, Execute := FALSE);    
			state := 50;
  		END_IF
	900:
		IF AxisA.Status.Error OR AxisB.Status.Error THEN 
			McReset(Axis := AxisB,Execute := FALSE);
			McResetA(Axis := AxisA,Execute := FALSE);
			McReset(Axis := AxisB,Execute := TRUE);
			McResetA(Axis := AxisA,Execute := TRUE);
		END_IF
		McStop(Axis := AxisB, Execute := TRUE);
		McStopA(Axis := AxisA, Execute := TRUE);
		IF fright OR fleft OR bright OR bleft OR pyturnleft OR cppvar THEN
			McStop(Axis := AxisB, Execute := FALSE); 
			McVelocity(Axis := AxisB, Execute := FALSE); 
			McStopA(Axis := AxisA, Execute := FALSE); 
			McVelocityA(Axis := AxisA, Execute := FALSE); 
			state := 50;
		END_IF
		
		
		
END_CASE
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="2111" Count="0" />
      <LineId Id="2617" Count="0" />
      <LineId Id="2112" Count="0" />
      <LineId Id="4165" Count="0" />
      <LineId Id="4164" Count="0" />
      <LineId Id="4172" Count="0" />
      <LineId Id="4167" Count="0" />
      <LineId Id="4271" Count="0" />
      <LineId Id="3283" Count="0" />
      <LineId Id="3282" Count="0" />
      <LineId Id="3285" Count="0" />
      <LineId Id="3284" Count="0" />
      <LineId Id="3860" Count="0" />
      <LineId Id="4273" Count="2" />
      <LineId Id="4272" Count="0" />
      <LineId Id="4277" Count="1" />
      <LineId Id="2115" Count="6" />
      <LineId Id="2123" Count="7" />
      <LineId Id="2132" Count="2" />
      <LineId Id="2620" Count="0" />
      <LineId Id="2981" Count="2" />
      <LineId Id="2995" Count="4" />
      <LineId Id="2992" Count="1" />
      <LineId Id="2140" Count="0" />
      <LineId Id="3000" Count="0" />
      <LineId Id="2144" Count="9" />
      <LineId Id="4067" Count="0" />
      <LineId Id="2154" Count="6" />
      <LineId Id="3082" Count="1" />
      <LineId Id="2161" Count="10" />
      <LineId Id="2621" Count="0" />
      <LineId Id="2173" Count="5" />
      <LineId Id="2533" Count="1" />
      <LineId Id="2181" Count="4" />
      <LineId Id="2535" Count="1" />
      <LineId Id="2424" Count="0" />
      <LineId Id="2189" Count="3" />
      <LineId Id="2537" Count="1" />
      <LineId Id="2195" Count="4" />
      <LineId Id="2539" Count="1" />
      <LineId Id="2202" Count="19" />
      <LineId Id="3084" Count="1" />
      <LineId Id="2222" Count="1" />
      <LineId Id="2702" Count="4" />
      <LineId Id="2224" Count="0" />
      <LineId Id="3172" Count="1" />
      <LineId Id="3175" Count="0" />
      <LineId Id="3170" Count="0" />
      <LineId Id="3174" Count="0" />
      <LineId Id="3680" Count="1" />
      <LineId Id="3287" Count="0" />
      <LineId Id="4280" Count="0" />
      <LineId Id="3350" Count="0" />
      <LineId Id="3583" Count="0" />
      <LineId Id="4069" Count="2" />
      <LineId Id="3467" Count="26" />
      <LineId Id="3466" Count="0" />
      <LineId Id="3408" Count="1" />
      <LineId Id="3854" Count="0" />
      <LineId Id="3853" Count="0" />
      <LineId Id="3805" Count="1" />
      <LineId Id="3808" Count="0" />
      <LineId Id="3883" Count="0" />
      <LineId Id="3817" Count="2" />
      <LineId Id="3884" Count="0" />
      <LineId Id="3832" Count="1" />
      <LineId Id="3835" Count="0" />
      <LineId Id="3886" Count="0" />
      <LineId Id="3843" Count="0" />
      <LineId Id="3851" Count="1" />
      <LineId Id="3887" Count="0" />
      <LineId Id="3834" Count="0" />
      <LineId Id="3949" Count="26" />
      <LineId Id="3921" Count="0" />
      <LineId Id="3320" Count="0" />
      <LineId Id="3291" Count="0" />
      <LineId Id="3352" Count="0" />
      <LineId Id="2252" Count="0" />
      <LineId Id="2311" Count="6" />
      <LineId Id="3176" Count="0" />
      <LineId Id="3185" Count="0" />
      <LineId Id="3177" Count="0" />
      <LineId Id="3190" Count="0" />
      <LineId Id="3186" Count="0" />
      <LineId Id="3191" Count="0" />
      <LineId Id="3179" Count="3" />
      <LineId Id="3187" Count="0" />
      <LineId Id="3183" Count="0" />
      <LineId Id="3188" Count="0" />
      <LineId Id="3184" Count="0" />
      <LineId Id="3189" Count="0" />
      <LineId Id="2318" Count="4" />
      <LineId Id="3086" Count="1" />
      <LineId Id="2324" Count="7" />
      <LineId Id="3169" Count="0" />
      <LineId Id="2333" Count="21" />
      <LineId Id="18" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>